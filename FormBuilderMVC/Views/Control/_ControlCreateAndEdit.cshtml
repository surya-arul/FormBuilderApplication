@using FormBuilderDTO.DTOs.Base
@using FormBuilderSharedService.Utilities
@model ControlsDto

<div class="form-group mb-4">
    <label asp-for="InternalName" class="control-label"></label>
    <input asp-for="InternalName" class="form-control" />
    <span asp-validation-for="InternalName" class="text-danger"></span>
</div>
<div class="form-group mb-4">
    <label asp-for="InputType" class="control-label"></label>
    <select asp-for="InputType" class="form-control">
        @foreach (var option in FormBuilderSharedService.Utilities.HtmlHelper.HtmlTypeDropdownList)
        {
            <option value="@option.Key">@option.Value</option>
        }
    </select>
    <span asp-validation-for="InputType" class="text-danger"></span>
</div>
<div class="form-group mb-4">
    <label asp-for="DivClassName" class="control-label"></label>
    <input asp-for="DivClassName" class="form-control" />
    <span asp-validation-for="DivClassName" class="text-danger"></span>
</div>
<div class="form-group mb-4">
    <label asp-for="InputClassName" class="control-label"></label>
    <input asp-for="InputClassName" class="form-control" />
    <span asp-validation-for="InputClassName" class="text-danger"></span>
</div>
<div class="form-group mb-4">
    <label asp-for="Label" class="control-label"></label>
    <input asp-for="Label" class="form-control" />
    <span asp-validation-for="Label" class="text-danger"></span>
</div>
<div class="form-group form-check mb-4">
    <label class="form-check-label">
        <input class="form-check-input" asp-for="ShouldHideLabel" />
        <label asp-for="ShouldHideLabel" class="control-label"></label>
    </label>
</div>
<div class="form-group mb-4">
    <label asp-for="LabelClassName" class="control-label"></label>
    <input asp-for="LabelClassName" class="form-control" />
    <span asp-validation-for="LabelClassName" class="text-danger"></span>
</div>
<div class="form-group mb-4">
    <label asp-for="Value" class="control-label"></label>
    <input asp-for="Value" class="form-control" />
    <span asp-validation-for="Value" class="text-danger"></span>
</div>
<div class="form-group form-check mb-4">
    <label class="form-check-label">
        <input class="form-check-input" asp-for="IsAutofocus" />
        <label asp-for="IsAutofocus" class="control-label"></label>
    </label>
</div>
<div class="form-group mb-4">
    <label asp-for="Placeholder" class="control-label"></label>
    <input asp-for="Placeholder" class="form-control" />
    <span asp-validation-for="Placeholder" class="text-danger"></span>
</div>
<div class="form-group form-check mb-4">
    <label class="form-check-label">
        <input class="form-check-input" asp-for="IsRequired" />
        <label asp-for="IsRequired" class="control-label"></label>
        <span asp-validation-for="IsRequired" class="text-danger"></span>
    </label>
</div>
<div class="form-group mb-4">
    <label asp-for="OptionData" class="control-label"></label>

    <div id="optionDataContainer">
        <!-- Option data will be dynamically added here -->
    </div>

    <span asp-validation-for="OptionData" class="text-danger"></span>
    <button id="addOption" type="button" class="btn btn-link">Add</button>
    <button id="removeOption" type="button" class="btn btn-link">Remove</button>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const optionDataContainer = document.getElementById("optionDataContainer");

        // Function to create a new option data field
        function createOptionDataField(value = "") {
            const div = document.createElement("div");
            div.className = "form-group mb-4";

            const input = document.createElement("input");
            input.type = "text";
            input.className = "form-control";
            input.id = "Control_OptionData";
            input.name = "Control.OptionData"; // Set the name attribute
            input.value = value;

            div.appendChild(input);

            return div;
        }

        // Populate option data values
    @if (Model.OptionData is not null && Model.OptionData.Any())
    {
        foreach (var option in Model.OptionData)
        {
            @:optionDataContainer.appendChild(createOptionDataField("@option"));
        }
    }

        // Add option data field
        document.getElementById("addOption").addEventListener("click", function () {
            optionDataContainer.appendChild(createOptionDataField());
        });

        // Remove option data field
        document.getElementById("removeOption").addEventListener("click", function () {
            const childrenCount = optionDataContainer.children.length;
            if (childrenCount > 0) { // Ensure at least one field remains
                optionDataContainer.removeChild(optionDataContainer.lastElementChild);
            }
        });
    });
</script>